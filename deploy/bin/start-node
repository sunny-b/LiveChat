#!/bin/bash

# This script is to help start the node project.

# Setting important environment variables.
export PORT=3000
export HOST=0.0.0.0
# Other environment variables can be set up here too.
# Examples:
# export MONGODB_URI=mongodb://${MONGODB_HOST}/
# export DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASS}@${MYSQL_HOST}/gonano
# export DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_HOST}/
# export REDIS_URL=redis://${REDIS_HOST}

# run any commands that need to be done before starting processes.
SCRIPTS=$(node -- <<END
  var scripts = require('./package.json').scripts;
  if (scripts != null) {
    Object.keys(scripts).forEach(function(script) {
      process.stdout.write(script+' ');
    });
  }
END
)

getCommand() {
  node -- <<END
  process.stdout.write(require('./package.json').scripts.$1)
END
}

# Set up things to run
processes=()
# entries should be quoted like this:
# processes+=("sleep 60")
if [[ " $SCRIPTS " =~ " start " ]]; then
  processes+=("$(getCommand start)")
else
  if [[ -f server.js ]]; then
    processes+=("node server.js")
  fi
fi

if [[ ${#processes[@]} -gt 1 ]]; then
  # Run and track things to execute.
  wait_pipe=$(mktemp -t "mako.waitpipe.XXXXXX" -u)
  rm -f $wait_pipe
  mkfifo $wait_pipe
  exec 3<> $wait_pipe
  pids=()
  cleanup() { echo "Going down, terminating child processes..." >&2; rm -f ${wait_pipe} || true; kill -USR1 "${pids[@]}" 2> /dev/null || true; }
  trap 'trap - QUIT EXIT; cleanup; kill -QUIT $$' QUIT
  trap 'trap - TERM EXIT; cleanup; kill -TERM $$' TERM
  trap 'trap - EXIT; cleanup' EXIT
  trap 'trap - INT EXIT; cleanup; kill -INT $$' INT;

  for process in "${processes[@]}"; do
    echo "Starting '${process}'"
    (
      trap '' INT;
      trap 'echo "${process}" >&3;' EXIT
      trap 'trap - TERM; kill -TERM $pid 2> /dev/null || true & wait $pid 2> /dev/null || true; [[ ${BASHPID:-} ]] && kill -TERM $BASHPID' TERM
      trap 'trap - USR1 EXIT; kill -TERM $pid 2> /dev/null || true & wait $pid 2> /dev/null || true; [[ ${BASHPID:-} ]] && kill -USR1 $BASHPID' USR1

      ${process} & pid=$!

      wait
    ) & pids+=($!)
    disown $!
  done
  read exitproc <&3
  echo "Process exited unexpectedly: '$exitproc'" >&2
  exit 1
elif [[ ${#processes[@]} -eq 1 ]]; then
  # only one thing to run, so exec it.
  echo "Starting '${processes[0]}'"
  exec ${processes[0]}
else
  # didn't set up any executables
  echo "Nothing to run, please configure the start script" >&2
  exec sleep 10
fi
